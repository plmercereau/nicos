inputs @ {
  nixpkgs,
  nix-darwin,
  cli,
  pkgs,
  ...
}: let
  path = "docs";
  cliBin = "nix run github:plmercereau/nicos --";
  warning = "AUTOGENERATED FILE, DO NOT MODIFY MANUALLY";
  inherit (nixpkgs) lib;

  inherit (import ./modules inputs) nixosModules darwinModules;

  flattenOptions = opt:
    if (opt ? "_type" && opt._type == "option")
    then lib.optionalAttrs (!(opt ? "internal" && opt.internal)) {${opt.__toString {}} = opt;} // (flattenOptions (opt.type.getSubOptions opt.loc))
    else lib.foldlAttrs (acc: _: value: acc // (flattenOptions value)) {} opt;

  generateMdOptions = options:
    lib.mapAttrsToList (
      name: value: ''
        <ResponseField
            name="${(value.__toString {})}"
            type="${value.type.description}"
            ${lib.optionalString (value ? "default" && value.default != null) "default={${builtins.toJSON value.default}}"}
            ${lib.optionalString (!value ? "default") "required"}
            >
          ${value.description}
          ${lib.optionalString (value ? "example") ''
          ```nix Example
          ${builtins.toJSON value.example}
          ```
        ''}
        </ResponseField>
      ''
    )
    options;

  nixosSystem = nixpkgs.lib.nixosSystem {
    system = "aarch64-linux";
    modules = nixosModules.default;
  };

  darwinSystem = nix-darwin.lib.darwinSystem {
    system = "aarch64-darwin";
    modules = darwinModules.default;
  };

  allNixosOptions = flattenOptions nixosSystem.options.settings;
  allDarwinOptions = flattenOptions darwinSystem.options.settings;
  commonOptions =
    lib.filterAttrs
    (name: value: (builtins.hasAttr name allNixosOptions) && (builtins.hasAttr name allDarwinOptions))
    (allNixosOptions // allDarwinOptions);

  commonFile = builtins.toFile "common.mdx" ''
    ---
    title: "Common options to NixOS and Darwin"
    sidebarTitle: "Common"
    icon: "share-nodes"
    comment: "${warning}"
    ---
    ${builtins.concatStringsSep "\n" (generateMdOptions commonOptions)}
  '';

  nixosFile = let
    nixosOptions = lib.filterAttrs (name: _: !(builtins.hasAttr name commonOptions)) allNixosOptions;
  in
    builtins.toFile "nixos.mdx" ''
      ---
      title: "NixOS options"
      sidebarTitle: "NixOS"
      icon: "linux"
      comment: "${warning}"
      ---
      ${builtins.concatStringsSep "\n" (generateMdOptions nixosOptions)}
    '';

  darwinFile = let
    darwinOptions = lib.filterAttrs (name: _: !(builtins.hasAttr name commonOptions)) allDarwinOptions;
  in
    builtins.toFile "darwin.mdx" ''
      ---
      title: "Darwin options"
      sidebarTitle: "Darwin"
      icon: "apple"
      comment: "${warning}"
      ---
      ${builtins.concatStringsSep "\n" (generateMdOptions darwinOptions)}
    '';

  hardwareFile = builtins.toFile "hardware.mdx" ''
    ---
    title: "Preconfigured hardware modules"
    sidebarTitle: "Hardware modules"
    icon: "microchip"
    comment: "${warning}"
    ---
    <RequestExample>

    ```nix hosts-nixos/example.nix
    {hardware, ...}: {
      imports = [hardware.hetzner-x86];
    }
    ```

    </RequestExample>
    <ResponseExample>

    ```nix darwin-hosts/example.nix
    {hardware, ...}: {
      imports = [hardware.m1];
    }
    ```

    </ResponseExample>

    | System | Name | Description |
    | ------ | ---- | ----------- |
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (name: value: "| Darwin | ${name} | ${value.label} |") (import ./hardware/darwin))}
    ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (name: value: "| NixOS  | ${name} | ${value.label} |") (import ./hardware/nixos))}
  '';
  cliHeader = builtins.toFile "cli.mdx" ''
    ---
    title: "Command line interface"
    sidebarTitle: "CLI"
    icon: "terminal"
    comment: "${warning}"
    ---
  '';
in
  pkgs.writeShellApplication {
    name = "docgen";
    text = ''
      umask 022
      mkdir -p ${path}/reference/machines
      cp -f ${commonFile} ${path}/reference/machines/common.mdx
      cp -f ${nixosFile} ${path}/reference/machines/nixos.mdx
      cp -f ${darwinFile} ${path}/reference/machines/darwin.mdx
      cp -f ${hardwareFile} ${path}/reference/hardware.mdx

      cp -f ${cliHeader} ${path}/reference/cli.mdx
      ${cli}/bin/nicos docgen --bin-cmd "${cliBin}" >> ${path}/reference/cli.mdx
    '';
  }
