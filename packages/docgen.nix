pkgs: inputs @ {
  nixpkgs,
  nix-darwin,
  ...
}: let
  cli = import ./cli pkgs inputs;
  repo = "plmercereau/nicos";
  url = "https://github.com/${repo}";
  fileUrl = "${url}/blob/main";
  cliBin = "nix run github:${repo} --";
  warning = "AUTOGENERATED FILE, DO NOT MODIFY MANUALLY";
  src = ./..;
  docDest = "docs/reference";
  inherit (nixpkgs) lib;

  inherit (import ../modules inputs) nixosModules darwinModules;

  fromTemplate = template: contents: let
    template_file = builtins.readFile (src + "/docs/${template}");
  in
    builtins.toFile "result.mdx" (
      builtins.replaceStrings
      ["%CONTENT%" "%WARNING%"]
      [contents warning]
      template_file
    );

  flattenOptions = opt:
    if (opt ? "_type" && opt._type == "option")
    then lib.optionalAttrs (!(opt ? "internal" && opt.internal)) {${opt.__toString {}} = opt;} // (flattenOptions (opt.type.getSubOptions opt.loc))
    else lib.foldlAttrs (acc: _: value: acc // (flattenOptions value)) {} opt;

  generateMdOptions = options: let
    list =
      lib.mapAttrsToList (
        name: value: ''
          <h4 id="${(value.__toString {})}">
            <span class="hidden">`${(value.__toString {})}`</span>
          </h4>

          <ResponseField
              name="${(value.__toString {})}"
              type="${value.type.description}"
              ${lib.optionalString (value ? "default" && value.default != null) "default={${builtins.toJSON value.default}}"}
              ${lib.optionalString (!value ? "default") "required"}
              >
          ${value.description}
          ${lib.optionalString (value ? "example") ''
            ```nix Example
            ${builtins.toJSON value.example}
            ```
          ''}
          Declared in ${builtins.concatStringsSep ", " (builtins.map (d: let
            file = lib.removePrefix "${toString src}/" (d.file);
          in "[${file}](${fileUrl}/${file}#L${toString d.line})")
          value.declarationPositions)}.
          </ResponseField>
        ''
      )
      options;
  in (builtins.concatStringsSep "\n" list);

  nixosSystem = nixpkgs.lib.nixosSystem {
    system = "aarch64-linux";
    modules = nixosModules.default;
  };

  darwinSystem = nix-darwin.lib.darwinSystem {
    system = "aarch64-darwin";
    modules = darwinModules.default;
  };

  allNixosOptions = flattenOptions nixosSystem.options.settings;
  allDarwinOptions = flattenOptions darwinSystem.options.settings;
  commonOptions =
    lib.filterAttrs
    (name: value: (builtins.hasAttr name allNixosOptions) && (builtins.hasAttr name allDarwinOptions))
    (allNixosOptions // allDarwinOptions);
  onlyNixosOptions =
    lib.filterAttrs (name: _: !(builtins.hasAttr name commonOptions)) allNixosOptions;
  onlyDarwinOptions =
    lib.filterAttrs (name: _: !(builtins.hasAttr name commonOptions)) allDarwinOptions;

  commonFile = fromTemplate "templates/machines/common.mdx" (generateMdOptions commonOptions);
  nixosFile = fromTemplate "templates/machines/nixos.mdx" (generateMdOptions onlyNixosOptions);
  darwinFile = fromTemplate "templates/machines/darwin.mdx" (generateMdOptions onlyDarwinOptions);

  hardwareFile =
    fromTemplate "templates/hardware.mdx"
    ''
      ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (name: value: "| Darwin | ${name} | ${value.label} |") (import ../hardware/darwin))}
      ${builtins.concatStringsSep "\n" (lib.mapAttrsToList (name: value: "| NixOS  | ${name} | ${value.label} |") (import ../hardware/nixos))}
    '';

  # Replace the %WARNINNG% but keep the %CONTENT% for the awk command
  cliTemplate = fromTemplate "templates/cli.mdx" "%CONTENT%";
in
  pkgs.writeShellApplication {
    name = "docgen";
    text = ''
      umask 022
      mkdir -p ${docDest}/machines
      cp -f ${commonFile} ${docDest}/machines/common.mdx
      cp -f ${nixosFile} ${docDest}/machines/nixos.mdx
      cp -f ${darwinFile} ${docDest}/machines/darwin.mdx
      cp -f ${hardwareFile} ${docDest}/hardware.mdx
      awk '/%CONTENT%/{system("${cli}/bin/nicos docgen --bin-cmd \"${cliBin}\"");next}1' ${cliTemplate} > ${docDest}/cli.mdx
    '';
  }
